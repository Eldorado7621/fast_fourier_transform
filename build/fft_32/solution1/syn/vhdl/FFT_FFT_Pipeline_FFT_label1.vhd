-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FFT_FFT_Pipeline_FFT_label1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    W_M_real_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    W_M_real_V_ce0 : OUT STD_LOGIC;
    W_M_real_V_q0 : IN STD_LOGIC_VECTOR (9 downto 0);
    W_M_imag_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    W_M_imag_V_ce0 : OUT STD_LOGIC;
    W_M_imag_V_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    data_OUT4_M_real_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_OUT4_M_real_V_ce0 : OUT STD_LOGIC;
    data_OUT4_M_real_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_OUT4_M_real_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_OUT4_M_real_V_ce1 : OUT STD_LOGIC;
    data_OUT4_M_real_V_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_OUT4_M_imag_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_OUT4_M_imag_V_ce0 : OUT STD_LOGIC;
    data_OUT4_M_imag_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_OUT4_M_imag_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_OUT4_M_imag_V_ce1 : OUT STD_LOGIC;
    data_OUT4_M_imag_V_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    xout_M_real_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    xout_M_real_V_ce0 : OUT STD_LOGIC;
    xout_M_real_V_we0 : OUT STD_LOGIC;
    xout_M_real_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    xout_M_real_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    xout_M_real_V_ce1 : OUT STD_LOGIC;
    xout_M_real_V_we1 : OUT STD_LOGIC;
    xout_M_real_V_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    xout_M_imag_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    xout_M_imag_V_ce0 : OUT STD_LOGIC;
    xout_M_imag_V_we0 : OUT STD_LOGIC;
    xout_M_imag_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    xout_M_imag_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    xout_M_imag_V_ce1 : OUT STD_LOGIC;
    xout_M_imag_V_we1 : OUT STD_LOGIC;
    xout_M_imag_V_d1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of FFT_FFT_Pipeline_FFT_label1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln26_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal Ulimit_fu_208_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal Ulimit_reg_372 : STD_LOGIC_VECTOR (4 downto 0);
    signal Ulimit_reg_372_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal Ulimit_reg_372_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal Ulimit_reg_372_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln30_1_fu_224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_1_reg_387 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_1_reg_387_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_1_reg_387_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_1_reg_387_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_1_reg_387_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_1_reg_403 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1171_fu_260_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1171_reg_408 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1171_1_fu_264_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1171_2_fu_268_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1171_2_reg_420 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1171_3_fu_272_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_326_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_332_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln31_fu_275_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_442 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_fu_218_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal index_fu_46 : STD_LOGIC_VECTOR (31 downto 0);
    signal butterfly_span_1_fu_242_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_3_fu_50 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_4_fu_199_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal Llimit_fu_212_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln33_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal butterfly_span_fu_236_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_338_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_346_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_r_V_fu_280_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1_fu_289_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_326_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_332_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_338_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_338_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_346_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_346_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component FFT_mul_mul_16s_10s_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FFT_mac_mulsub_16s_9s_24s_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FFT_mac_muladd_16s_9s_24s_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FFT_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_mul_16s_10s_24_4_1_U35 : component FFT_mul_mul_16s_10s_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_OUT4_M_real_V_q1,
        din1 => grp_fu_326_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_326_p2);

    mul_mul_16s_10s_24_4_1_U36 : component FFT_mul_mul_16s_10s_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_OUT4_M_imag_V_q1,
        din1 => grp_fu_332_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_332_p2);

    mac_mulsub_16s_9s_24s_24_4_1_U37 : component FFT_mac_mulsub_16s_9s_24s_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_338_p0,
        din1 => grp_fu_338_p1,
        din2 => grp_fu_326_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_338_p3);

    mac_muladd_16s_9s_24s_24_4_1_U38 : component FFT_mac_muladd_16s_9s_24s_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_346_p0,
        din1 => grp_fu_346_p1,
        din2 => grp_fu_332_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_346_p3);

    flow_control_loop_pipe_sequential_init_U : component FFT_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    i_3_fu_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_3_fu_50 <= ap_const_lv5_0;
                elsif (((icmp_ln26_fu_193_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_3_fu_50 <= i_4_fu_199_p2;
                end if;
            end if; 
        end if;
    end process;

    index_fu_46_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    index_fu_46 <= ap_const_lv32_0;
                elsif (((icmp_ln26_fu_193_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    index_fu_46 <= butterfly_span_1_fu_242_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_193_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                Ulimit_reg_372 <= Ulimit_fu_208_p1;
                    zext_ln30_1_reg_387(4 downto 0) <= zext_ln30_1_fu_224_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                Ulimit_reg_372_pp0_iter2_reg <= Ulimit_reg_372;
                Ulimit_reg_372_pp0_iter3_reg <= Ulimit_reg_372_pp0_iter2_reg;
                Ulimit_reg_372_pp0_iter4_reg <= Ulimit_reg_372_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                r_V_1_reg_403 <= W_M_imag_V_q0;
                sext_ln1171_2_reg_420 <= sext_ln1171_2_fu_268_p1;
                sext_ln1171_reg_408 <= sext_ln1171_fu_260_p1;
                    zext_ln30_1_reg_387_pp0_iter2_reg(4 downto 0) <= zext_ln30_1_reg_387(4 downto 0);
                    zext_ln30_1_reg_387_pp0_iter3_reg(4 downto 0) <= zext_ln30_1_reg_387_pp0_iter2_reg(4 downto 0);
                    zext_ln30_1_reg_387_pp0_iter4_reg(4 downto 0) <= zext_ln30_1_reg_387_pp0_iter3_reg(4 downto 0);
                    zext_ln30_1_reg_387_pp0_iter5_reg(4 downto 0) <= zext_ln30_1_reg_387_pp0_iter4_reg(4 downto 0);
                    zext_ln31_reg_442(4 downto 0) <= zext_ln31_fu_275_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
            end if;
        end if;
    end process;
    zext_ln30_1_reg_387(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln30_1_reg_387_pp0_iter2_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln30_1_reg_387_pp0_iter3_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln30_1_reg_387_pp0_iter4_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln30_1_reg_387_pp0_iter5_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_442(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Llimit_fu_212_p2 <= (ap_const_lv5_10 xor Ulimit_fu_208_p1);
    Ulimit_fu_208_p1 <= index_fu_46(5 - 1 downto 0);
    W_M_imag_V_address0 <= zext_ln30_fu_218_p1(4 - 1 downto 0);

    W_M_imag_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_M_imag_V_ce0 <= ap_const_logic_1;
        else 
            W_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_M_real_V_address0 <= zext_ln30_fu_218_p1(4 - 1 downto 0);

    W_M_real_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_M_real_V_ce0 <= ap_const_logic_1;
        else 
            W_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln26_fu_193_p2)
    begin
        if (((icmp_ln26_fu_193_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    butterfly_span_1_fu_242_p3 <= 
        butterfly_span_fu_236_p2 when (icmp_ln33_fu_230_p2(0) = '1') else 
        ap_const_lv32_0;
    butterfly_span_fu_236_p2 <= std_logic_vector(unsigned(index_fu_46) + unsigned(ap_const_lv32_1));
    data_OUT4_M_imag_V_address0 <= zext_ln31_fu_275_p1(5 - 1 downto 0);
    data_OUT4_M_imag_V_address1 <= zext_ln30_1_fu_224_p1(5 - 1 downto 0);

    data_OUT4_M_imag_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            data_OUT4_M_imag_V_ce0 <= ap_const_logic_1;
        else 
            data_OUT4_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT4_M_imag_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_OUT4_M_imag_V_ce1 <= ap_const_logic_1;
        else 
            data_OUT4_M_imag_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    data_OUT4_M_real_V_address0 <= zext_ln31_fu_275_p1(5 - 1 downto 0);
    data_OUT4_M_real_V_address1 <= zext_ln30_1_fu_224_p1(5 - 1 downto 0);

    data_OUT4_M_real_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            data_OUT4_M_real_V_ce0 <= ap_const_logic_1;
        else 
            data_OUT4_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT4_M_real_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_OUT4_M_real_V_ce1 <= ap_const_logic_1;
        else 
            data_OUT4_M_real_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_326_p1 <= sext_ln1171_1_fu_264_p1(10 - 1 downto 0);
    grp_fu_332_p1 <= sext_ln1171_1_fu_264_p1(10 - 1 downto 0);
    grp_fu_338_p0 <= sext_ln1171_2_reg_420(16 - 1 downto 0);
    grp_fu_338_p1 <= sext_ln1171_3_fu_272_p1(9 - 1 downto 0);
    grp_fu_346_p0 <= sext_ln1171_reg_408(16 - 1 downto 0);
    grp_fu_346_p1 <= sext_ln1171_3_fu_272_p1(9 - 1 downto 0);
    i_4_fu_199_p2 <= std_logic_vector(unsigned(i_3_fu_50) + unsigned(ap_const_lv5_1));
    icmp_ln26_fu_193_p2 <= "1" when (i_3_fu_50 = ap_const_lv5_10) else "0";
    icmp_ln33_fu_230_p2 <= "1" when (signed(index_fu_46) < signed(ap_const_lv32_F)) else "0";
    p_r_V_fu_280_p4 <= grp_fu_338_p3(23 downto 8);
        sext_ln1171_1_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(W_M_real_V_q0),24));

        sext_ln1171_2_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_OUT4_M_imag_V_q1),24));

        sext_ln1171_3_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_1_reg_403),24));

        sext_ln1171_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_OUT4_M_real_V_q1),24));

    trunc_ln1_fu_289_p4 <= grp_fu_346_p3(23 downto 8);
    xout_M_imag_V_address0 <= zext_ln31_reg_442(5 - 1 downto 0);
    xout_M_imag_V_address1 <= zext_ln30_1_reg_387_pp0_iter5_reg(5 - 1 downto 0);

    xout_M_imag_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            xout_M_imag_V_ce0 <= ap_const_logic_1;
        else 
            xout_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xout_M_imag_V_ce1_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            xout_M_imag_V_ce1 <= ap_const_logic_1;
        else 
            xout_M_imag_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    xout_M_imag_V_d0 <= std_logic_vector(unsigned(data_OUT4_M_imag_V_q0) + unsigned(trunc_ln1_fu_289_p4));
    xout_M_imag_V_d1 <= std_logic_vector(unsigned(data_OUT4_M_imag_V_q0) - unsigned(trunc_ln1_fu_289_p4));

    xout_M_imag_V_we0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            xout_M_imag_V_we0 <= ap_const_logic_1;
        else 
            xout_M_imag_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    xout_M_imag_V_we1_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            xout_M_imag_V_we1 <= ap_const_logic_1;
        else 
            xout_M_imag_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    xout_M_real_V_address0 <= zext_ln31_reg_442(5 - 1 downto 0);
    xout_M_real_V_address1 <= zext_ln30_1_reg_387_pp0_iter5_reg(5 - 1 downto 0);

    xout_M_real_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            xout_M_real_V_ce0 <= ap_const_logic_1;
        else 
            xout_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xout_M_real_V_ce1_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            xout_M_real_V_ce1 <= ap_const_logic_1;
        else 
            xout_M_real_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    xout_M_real_V_d0 <= std_logic_vector(unsigned(data_OUT4_M_real_V_q0) + unsigned(p_r_V_fu_280_p4));
    xout_M_real_V_d1 <= std_logic_vector(unsigned(data_OUT4_M_real_V_q0) - unsigned(p_r_V_fu_280_p4));

    xout_M_real_V_we0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            xout_M_real_V_we0 <= ap_const_logic_1;
        else 
            xout_M_real_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    xout_M_real_V_we1_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            xout_M_real_V_we1 <= ap_const_logic_1;
        else 
            xout_M_real_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln30_1_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Llimit_fu_212_p2),64));
    zext_ln30_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_fu_46),64));
    zext_ln31_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Ulimit_reg_372_pp0_iter4_reg),64));
end behav;
