-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FFT_FFT0_1_Pipeline_FFT_label1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    index_shift_offset_cast : IN STD_LOGIC_VECTOR (2 downto 0);
    pass_shift_offset_cast : IN STD_LOGIC_VECTOR (2 downto 0);
    FFT_stage_offset_cast : IN STD_LOGIC_VECTOR (3 downto 0);
    data_IN_M_real_0_0_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_IN_M_real_0_0_0_ce0 : OUT STD_LOGIC;
    data_IN_M_real_0_0_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_IN_M_real_0_0_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_IN_M_real_0_0_0_ce1 : OUT STD_LOGIC;
    data_IN_M_real_0_0_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_IN_M_imag_0_0_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_IN_M_imag_0_0_0_ce0 : OUT STD_LOGIC;
    data_IN_M_imag_0_0_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_IN_M_imag_0_0_0_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_IN_M_imag_0_0_0_ce1 : OUT STD_LOGIC;
    data_IN_M_imag_0_0_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    data_OUT_M_real_0_0_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_OUT_M_real_0_0_0_ce0 : OUT STD_LOGIC;
    data_OUT_M_real_0_0_0_we0 : OUT STD_LOGIC;
    data_OUT_M_real_0_0_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    data_OUT_M_imag_0_0_0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    data_OUT_M_imag_0_0_0_ce0 : OUT STD_LOGIC;
    data_OUT_M_imag_0_0_0_we0 : OUT STD_LOGIC;
    data_OUT_M_imag_0_0_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    sub_cast : IN STD_LOGIC_VECTOR (3 downto 0);
    zext_ln26 : IN STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of FFT_FFT0_1_Pipeline_FFT_label1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln26_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal W_M_real_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal W_M_real_V_ce0 : STD_LOGIC;
    signal W_M_real_V_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal W_M_imag_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal W_M_imag_V_ce0 : STD_LOGIC;
    signal W_M_imag_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln26_cast_fu_218_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln26_cast_reg_486 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sub_cast_cast_fu_222_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_cast_cast_reg_491 : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_stage_offset_cast_cast_fu_226_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal FFT_stage_offset_cast_cast_reg_496 : STD_LOGIC_VECTOR (4 downto 0);
    signal pass_shift_offset_cast_cast_fu_230_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal pass_shift_offset_cast_cast_reg_501 : STD_LOGIC_VECTOR (4 downto 0);
    signal index_shift_offset_cast_cast_fu_234_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal index_shift_offset_cast_cast_reg_506 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln26_reg_511 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln26_reg_511_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_511_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_20_fu_271_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_20_reg_515 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln30_fu_280_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_reg_520 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln33_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_530 : STD_LOGIC_VECTOR (0 downto 0);
    signal Ulimit_fu_326_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal Ulimit_reg_535 : STD_LOGIC_VECTOR (4 downto 0);
    signal Ulimit_reg_535_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln30_1_fu_336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_1_reg_540 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_1_reg_540_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_1_reg_540_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_reg_546 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1171_fu_373_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1171_reg_566 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1171_1_fu_377_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1171_2_fu_380_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1171_2_reg_578 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1171_3_fu_384_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_437_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_443_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln31_fu_388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_600 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_r_M_real_V_4_fu_425_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_real_V_4_reg_616 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_V_4_fu_431_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_V_4_reg_621 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal butterfly_span_fu_58 : STD_LOGIC_VECTOR (31 downto 0);
    signal butterfly_span_4_fu_296_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal butterfly_pass_fu_62 : STD_LOGIC_VECTOR (31 downto 0);
    signal butterfly_pass_3_fu_361_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_66 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_6_fu_262_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_r_M_real_V_3_fu_411_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_V_3_fu_418_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal index_fu_275_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal butterfly_span_3_fu_290_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_19_fu_317_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln28_fu_321_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal Llimit_fu_331_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln35_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal butterfly_pass_1_fu_347_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal butterfly_pass_2_fu_353_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_449_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_457_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_r_V_fu_393_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_fu_402_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_437_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_443_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_449_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_449_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_457_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_457_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter3_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to4 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component FFT_mul_mul_16s_10s_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FFT_mac_mulsub_16s_9s_24s_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FFT_mac_muladd_16s_9s_24s_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FFT_FFT0_1_Pipeline_FFT_label1_W_M_real_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component FFT_FFT0_1_Pipeline_FFT_label1_W_M_imag_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component FFT_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    W_M_real_V_U : component FFT_FFT0_1_Pipeline_FFT_label1_W_M_real_V_ROM_AUTO_1R
    generic map (
        DataWidth => 10,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_M_real_V_address0,
        ce0 => W_M_real_V_ce0,
        q0 => W_M_real_V_q0);

    W_M_imag_V_U : component FFT_FFT0_1_Pipeline_FFT_label1_W_M_imag_V_ROM_AUTO_1R
    generic map (
        DataWidth => 9,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_M_imag_V_address0,
        ce0 => W_M_imag_V_ce0,
        q0 => W_M_imag_V_q0);

    mul_mul_16s_10s_24_4_1_U9 : component FFT_mul_mul_16s_10s_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_IN_M_real_0_0_0_q1,
        din1 => grp_fu_437_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_437_p2);

    mul_mul_16s_10s_24_4_1_U10 : component FFT_mul_mul_16s_10s_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_IN_M_imag_0_0_0_q1,
        din1 => grp_fu_443_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_443_p2);

    mac_mulsub_16s_9s_24s_24_4_1_U11 : component FFT_mac_mulsub_16s_9s_24s_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_449_p0,
        din1 => grp_fu_449_p1,
        din2 => grp_fu_437_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_449_p3);

    mac_muladd_16s_9s_24s_24_4_1_U12 : component FFT_mac_muladd_16s_9s_24s_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_457_p0,
        din1 => grp_fu_457_p1,
        din2 => grp_fu_443_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_457_p3);

    flow_control_loop_pipe_sequential_init_U : component FFT_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    butterfly_pass_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    butterfly_pass_fu_62 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln26_reg_511 = ap_const_lv1_0))) then 
                    butterfly_pass_fu_62 <= butterfly_pass_3_fu_361_p3;
                end if;
            end if; 
        end if;
    end process;

    butterfly_span_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                butterfly_span_fu_58 <= ap_const_lv32_0;
            elsif (((icmp_ln26_fu_256_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                butterfly_span_fu_58 <= butterfly_span_4_fu_296_p3;
            end if; 
        end if;
    end process;

    i_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_fu_66 <= ap_const_lv5_0;
            elsif (((icmp_ln26_fu_256_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                i_fu_66 <= i_6_fu_262_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    FFT_stage_offset_cast_cast_reg_496(3 downto 0) <= FFT_stage_offset_cast_cast_fu_226_p1(3 downto 0);
                Ulimit_reg_535_pp0_iter2_reg <= Ulimit_reg_535;
                    index_shift_offset_cast_cast_reg_506(2 downto 0) <= index_shift_offset_cast_cast_fu_234_p1(2 downto 0);
                    pass_shift_offset_cast_cast_reg_501(2 downto 0) <= pass_shift_offset_cast_cast_fu_230_p1(2 downto 0);
                    sub_cast_cast_reg_491(3 downto 0) <= sub_cast_cast_fu_222_p1(3 downto 0);
                    zext_ln26_cast_reg_486(3 downto 0) <= zext_ln26_cast_fu_218_p1(3 downto 0);
                    zext_ln30_1_reg_540_pp0_iter2_reg(4 downto 0) <= zext_ln30_1_reg_540(4 downto 0);
                    zext_ln30_1_reg_540_pp0_iter3_reg(4 downto 0) <= zext_ln30_1_reg_540_pp0_iter2_reg(4 downto 0);
                    zext_ln31_reg_600(4 downto 0) <= zext_ln31_fu_388_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln26_reg_511 = ap_const_lv1_0))) then
                Ulimit_reg_535 <= Ulimit_fu_326_p2;
                r_V_reg_546 <= W_M_real_V_q0;
                    zext_ln30_1_reg_540(4 downto 0) <= zext_ln30_1_fu_336_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_256_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                empty_20_reg_515 <= empty_20_fu_271_p1;
                icmp_ln33_reg_530 <= icmp_ln33_fu_285_p2;
                    zext_ln30_reg_520(4 downto 0) <= zext_ln30_fu_280_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                icmp_ln26_reg_511 <= icmp_ln26_fu_256_p2;
                icmp_ln26_reg_511_pp0_iter1_reg <= icmp_ln26_reg_511;
                icmp_ln26_reg_511_pp0_iter2_reg <= icmp_ln26_reg_511_pp0_iter1_reg;
                p_r_M_imag_V_4_reg_621 <= p_r_M_imag_V_4_fu_431_p2;
                p_r_M_real_V_4_reg_616 <= p_r_M_real_V_4_fu_425_p2;
                sext_ln1171_2_reg_578 <= sext_ln1171_2_fu_380_p1;
                sext_ln1171_reg_566 <= sext_ln1171_fu_373_p1;
            end if;
        end if;
    end process;
    zext_ln26_cast_reg_486(31 downto 4) <= "0000000000000000000000000000";
    sub_cast_cast_reg_491(31 downto 4) <= "0000000000000000000000000000";
    FFT_stage_offset_cast_cast_reg_496(4) <= '0';
    pass_shift_offset_cast_cast_reg_501(4 downto 3) <= "00";
    index_shift_offset_cast_cast_reg_506(4 downto 3) <= "00";
    zext_ln30_reg_520(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln30_1_reg_540(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln30_1_reg_540_pp0_iter2_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln30_1_reg_540_pp0_iter3_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_600(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter3_stage0, ap_idle_pp0_0to2, ap_idle_pp0_1to4, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to4 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    FFT_stage_offset_cast_cast_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(FFT_stage_offset_cast),5));
    Llimit_fu_331_p2 <= std_logic_vector(unsigned(Ulimit_fu_326_p2) + unsigned(FFT_stage_offset_cast_cast_reg_496));
    Ulimit_fu_326_p2 <= std_logic_vector(unsigned(empty_20_reg_515) + unsigned(shl_ln28_fu_321_p2));
    W_M_imag_V_address0 <= zext_ln30_reg_520(4 - 1 downto 0);

    W_M_imag_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            W_M_imag_V_ce0 <= ap_const_logic_1;
        else 
            W_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_M_real_V_address0 <= zext_ln30_fu_280_p1(4 - 1 downto 0);

    W_M_real_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            W_M_real_V_ce0 <= ap_const_logic_1;
        else 
            W_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln26_fu_256_p2)
    begin
        if (((icmp_ln26_fu_256_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter3_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, icmp_ln26_reg_511_pp0_iter2_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln26_reg_511_pp0_iter2_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to4_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to4 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    butterfly_pass_1_fu_347_p2 <= std_logic_vector(unsigned(butterfly_pass_fu_62) + unsigned(ap_const_lv32_1));
    butterfly_pass_2_fu_353_p3 <= 
        butterfly_pass_1_fu_347_p2 when (icmp_ln35_fu_342_p2(0) = '1') else 
        ap_const_lv32_0;
    butterfly_pass_3_fu_361_p3 <= 
        butterfly_pass_fu_62 when (icmp_ln33_reg_530(0) = '1') else 
        butterfly_pass_2_fu_353_p3;
    butterfly_span_3_fu_290_p2 <= std_logic_vector(unsigned(butterfly_span_fu_58) + unsigned(ap_const_lv32_1));
    butterfly_span_4_fu_296_p3 <= 
        butterfly_span_3_fu_290_p2 when (icmp_ln33_fu_285_p2(0) = '1') else 
        ap_const_lv32_0;
    data_IN_M_imag_0_0_0_address0 <= zext_ln31_fu_388_p1(5 - 1 downto 0);
    data_IN_M_imag_0_0_0_address1 <= zext_ln30_1_fu_336_p1(5 - 1 downto 0);

    data_IN_M_imag_0_0_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_IN_M_imag_0_0_0_ce0 <= ap_const_logic_1;
        else 
            data_IN_M_imag_0_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_IN_M_imag_0_0_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_IN_M_imag_0_0_0_ce1 <= ap_const_logic_1;
        else 
            data_IN_M_imag_0_0_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    data_IN_M_real_0_0_0_address0 <= zext_ln31_fu_388_p1(5 - 1 downto 0);
    data_IN_M_real_0_0_0_address1 <= zext_ln30_1_fu_336_p1(5 - 1 downto 0);

    data_IN_M_real_0_0_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_IN_M_real_0_0_0_ce0 <= ap_const_logic_1;
        else 
            data_IN_M_real_0_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_IN_M_real_0_0_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_IN_M_real_0_0_0_ce1 <= ap_const_logic_1;
        else 
            data_IN_M_real_0_0_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT_M_imag_0_0_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, zext_ln30_1_reg_540_pp0_iter3_reg, zext_ln31_reg_600, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_OUT_M_imag_0_0_0_address0 <= zext_ln31_reg_600(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            data_OUT_M_imag_0_0_0_address0 <= zext_ln30_1_reg_540_pp0_iter3_reg(5 - 1 downto 0);
        else 
            data_OUT_M_imag_0_0_0_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT_M_imag_0_0_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            data_OUT_M_imag_0_0_0_ce0 <= ap_const_logic_1;
        else 
            data_OUT_M_imag_0_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT_M_imag_0_0_0_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, p_r_M_imag_V_4_reg_621, ap_block_pp0_stage1, ap_block_pp0_stage0, p_r_M_imag_V_3_fu_418_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_OUT_M_imag_0_0_0_d0 <= p_r_M_imag_V_4_reg_621;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            data_OUT_M_imag_0_0_0_d0 <= p_r_M_imag_V_3_fu_418_p2;
        else 
            data_OUT_M_imag_0_0_0_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_OUT_M_imag_0_0_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            data_OUT_M_imag_0_0_0_we0 <= ap_const_logic_1;
        else 
            data_OUT_M_imag_0_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT_M_real_0_0_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, zext_ln30_1_reg_540_pp0_iter3_reg, zext_ln31_reg_600, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_OUT_M_real_0_0_0_address0 <= zext_ln31_reg_600(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            data_OUT_M_real_0_0_0_address0 <= zext_ln30_1_reg_540_pp0_iter3_reg(5 - 1 downto 0);
        else 
            data_OUT_M_real_0_0_0_address0 <= "XXXXX";
        end if; 
    end process;


    data_OUT_M_real_0_0_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            data_OUT_M_real_0_0_0_ce0 <= ap_const_logic_1;
        else 
            data_OUT_M_real_0_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_OUT_M_real_0_0_0_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, p_r_M_real_V_4_reg_616, ap_block_pp0_stage1, ap_block_pp0_stage0, p_r_M_real_V_3_fu_411_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_OUT_M_real_0_0_0_d0 <= p_r_M_real_V_4_reg_616;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            data_OUT_M_real_0_0_0_d0 <= p_r_M_real_V_3_fu_411_p2;
        else 
            data_OUT_M_real_0_0_0_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_OUT_M_real_0_0_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            data_OUT_M_real_0_0_0_we0 <= ap_const_logic_1;
        else 
            data_OUT_M_real_0_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_19_fu_317_p1 <= butterfly_pass_fu_62(5 - 1 downto 0);
    empty_20_fu_271_p1 <= butterfly_span_fu_58(5 - 1 downto 0);
    grp_fu_437_p1 <= sext_ln1171_1_fu_377_p1(10 - 1 downto 0);
    grp_fu_443_p1 <= sext_ln1171_1_fu_377_p1(10 - 1 downto 0);
    grp_fu_449_p0 <= sext_ln1171_2_reg_578(16 - 1 downto 0);
    grp_fu_449_p1 <= sext_ln1171_3_fu_384_p1(9 - 1 downto 0);
    grp_fu_457_p0 <= sext_ln1171_reg_566(16 - 1 downto 0);
    grp_fu_457_p1 <= sext_ln1171_3_fu_384_p1(9 - 1 downto 0);
    i_6_fu_262_p2 <= std_logic_vector(unsigned(i_fu_66) + unsigned(ap_const_lv5_1));
    icmp_ln26_fu_256_p2 <= "1" when (i_fu_66 = ap_const_lv5_10) else "0";
    icmp_ln33_fu_285_p2 <= "1" when (signed(butterfly_span_fu_58) < signed(sub_cast_cast_reg_491)) else "0";
    icmp_ln35_fu_342_p2 <= "1" when (signed(butterfly_pass_fu_62) < signed(zext_ln26_cast_reg_486)) else "0";
    index_fu_275_p2 <= std_logic_vector(shift_left(unsigned(empty_20_fu_271_p1),to_integer(unsigned('0' & index_shift_offset_cast_cast_reg_506(5-1 downto 0)))));
    index_shift_offset_cast_cast_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_shift_offset_cast),5));
    p_r_M_imag_V_3_fu_418_p2 <= std_logic_vector(unsigned(data_IN_M_imag_0_0_0_q0) - unsigned(trunc_ln_fu_402_p4));
    p_r_M_imag_V_4_fu_431_p2 <= std_logic_vector(unsigned(data_IN_M_imag_0_0_0_q0) + unsigned(trunc_ln_fu_402_p4));
    p_r_M_real_V_3_fu_411_p2 <= std_logic_vector(unsigned(data_IN_M_real_0_0_0_q0) - unsigned(p_r_V_fu_393_p4));
    p_r_M_real_V_4_fu_425_p2 <= std_logic_vector(unsigned(data_IN_M_real_0_0_0_q0) + unsigned(p_r_V_fu_393_p4));
    p_r_V_fu_393_p4 <= grp_fu_449_p3(23 downto 8);
    pass_shift_offset_cast_cast_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pass_shift_offset_cast),5));
        sext_ln1171_1_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_reg_546),24));

        sext_ln1171_2_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_IN_M_imag_0_0_0_q1),24));

        sext_ln1171_3_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(W_M_imag_V_q0),24));

        sext_ln1171_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_IN_M_real_0_0_0_q1),24));

    shl_ln28_fu_321_p2 <= std_logic_vector(shift_left(unsigned(empty_19_fu_317_p1),to_integer(unsigned('0' & pass_shift_offset_cast_cast_reg_501(5-1 downto 0)))));
    sub_cast_cast_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_cast),32));
    trunc_ln_fu_402_p4 <= grp_fu_457_p3(23 downto 8);
    zext_ln26_cast_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln26),32));
    zext_ln30_1_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Llimit_fu_331_p2),64));
    zext_ln30_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_fu_275_p2),64));
    zext_ln31_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Ulimit_reg_535_pp0_iter2_reg),64));
end behav;
