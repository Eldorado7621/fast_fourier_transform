// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module FFT_FFT_Pipeline_FFT_label1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        W_M_real_V_address0,
        W_M_real_V_ce0,
        W_M_real_V_q0,
        W_M_imag_V_address0,
        W_M_imag_V_ce0,
        W_M_imag_V_q0,
        data_OUT4_M_real_V_address0,
        data_OUT4_M_real_V_ce0,
        data_OUT4_M_real_V_q0,
        data_OUT4_M_real_V_address1,
        data_OUT4_M_real_V_ce1,
        data_OUT4_M_real_V_q1,
        data_OUT4_M_imag_V_address0,
        data_OUT4_M_imag_V_ce0,
        data_OUT4_M_imag_V_q0,
        data_OUT4_M_imag_V_address1,
        data_OUT4_M_imag_V_ce1,
        data_OUT4_M_imag_V_q1,
        xout_M_real_V_address0,
        xout_M_real_V_ce0,
        xout_M_real_V_we0,
        xout_M_real_V_d0,
        xout_M_real_V_address1,
        xout_M_real_V_ce1,
        xout_M_real_V_we1,
        xout_M_real_V_d1,
        xout_M_imag_V_address0,
        xout_M_imag_V_ce0,
        xout_M_imag_V_we0,
        xout_M_imag_V_d0,
        xout_M_imag_V_address1,
        xout_M_imag_V_ce1,
        xout_M_imag_V_we1,
        xout_M_imag_V_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] W_M_real_V_address0;
output   W_M_real_V_ce0;
input  [9:0] W_M_real_V_q0;
output  [3:0] W_M_imag_V_address0;
output   W_M_imag_V_ce0;
input  [8:0] W_M_imag_V_q0;
output  [4:0] data_OUT4_M_real_V_address0;
output   data_OUT4_M_real_V_ce0;
input  [15:0] data_OUT4_M_real_V_q0;
output  [4:0] data_OUT4_M_real_V_address1;
output   data_OUT4_M_real_V_ce1;
input  [15:0] data_OUT4_M_real_V_q1;
output  [4:0] data_OUT4_M_imag_V_address0;
output   data_OUT4_M_imag_V_ce0;
input  [15:0] data_OUT4_M_imag_V_q0;
output  [4:0] data_OUT4_M_imag_V_address1;
output   data_OUT4_M_imag_V_ce1;
input  [15:0] data_OUT4_M_imag_V_q1;
output  [4:0] xout_M_real_V_address0;
output   xout_M_real_V_ce0;
output   xout_M_real_V_we0;
output  [15:0] xout_M_real_V_d0;
output  [4:0] xout_M_real_V_address1;
output   xout_M_real_V_ce1;
output   xout_M_real_V_we1;
output  [15:0] xout_M_real_V_d1;
output  [4:0] xout_M_imag_V_address0;
output   xout_M_imag_V_ce0;
output   xout_M_imag_V_we0;
output  [15:0] xout_M_imag_V_d0;
output  [4:0] xout_M_imag_V_address1;
output   xout_M_imag_V_ce1;
output   xout_M_imag_V_we1;
output  [15:0] xout_M_imag_V_d1;

reg ap_idle;
reg W_M_real_V_ce0;
reg W_M_imag_V_ce0;
reg data_OUT4_M_real_V_ce0;
reg data_OUT4_M_real_V_ce1;
reg data_OUT4_M_imag_V_ce0;
reg data_OUT4_M_imag_V_ce1;
reg xout_M_real_V_ce0;
reg xout_M_real_V_we0;
reg xout_M_real_V_ce1;
reg xout_M_real_V_we1;
reg xout_M_imag_V_ce0;
reg xout_M_imag_V_we0;
reg xout_M_imag_V_ce1;
reg xout_M_imag_V_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln26_fu_193_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [4:0] Ulimit_fu_208_p1;
reg   [4:0] Ulimit_reg_372;
reg   [4:0] Ulimit_reg_372_pp0_iter2_reg;
reg   [4:0] Ulimit_reg_372_pp0_iter3_reg;
reg   [4:0] Ulimit_reg_372_pp0_iter4_reg;
wire   [63:0] zext_ln30_1_fu_224_p1;
reg   [63:0] zext_ln30_1_reg_387;
reg   [63:0] zext_ln30_1_reg_387_pp0_iter2_reg;
reg   [63:0] zext_ln30_1_reg_387_pp0_iter3_reg;
reg   [63:0] zext_ln30_1_reg_387_pp0_iter4_reg;
reg   [63:0] zext_ln30_1_reg_387_pp0_iter5_reg;
reg   [8:0] r_V_1_reg_403;
wire  signed [23:0] sext_ln1171_fu_260_p1;
reg  signed [23:0] sext_ln1171_reg_408;
wire  signed [23:0] sext_ln1171_1_fu_264_p1;
wire  signed [23:0] sext_ln1171_2_fu_268_p1;
reg  signed [23:0] sext_ln1171_2_reg_420;
wire  signed [23:0] sext_ln1171_3_fu_272_p1;
wire  signed [23:0] grp_fu_326_p2;
wire  signed [23:0] grp_fu_332_p2;
wire   [63:0] zext_ln31_fu_275_p1;
reg   [63:0] zext_ln31_reg_442;
wire   [63:0] zext_ln30_fu_218_p1;
wire    ap_block_pp0_stage0;
reg   [31:0] index_fu_46;
wire   [31:0] butterfly_span_1_fu_242_p3;
wire    ap_loop_init;
reg   [4:0] i_3_fu_50;
wire   [4:0] i_4_fu_199_p2;
wire   [4:0] Llimit_fu_212_p2;
wire   [0:0] icmp_ln33_fu_230_p2;
wire   [31:0] butterfly_span_fu_236_p2;
wire  signed [23:0] grp_fu_338_p3;
wire  signed [23:0] grp_fu_346_p3;
wire   [15:0] p_r_V_fu_280_p4;
wire   [15:0] trunc_ln1_fu_289_p4;
wire  signed [9:0] grp_fu_326_p1;
wire  signed [9:0] grp_fu_332_p1;
wire  signed [15:0] grp_fu_338_p0;
wire  signed [8:0] grp_fu_338_p1;
wire  signed [15:0] grp_fu_346_p0;
wire  signed [8:0] grp_fu_346_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_done_reg = 1'b0;
end

FFT_mul_mul_16s_10s_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 24 ))
mul_mul_16s_10s_24_4_1_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(data_OUT4_M_real_V_q1),
    .din1(grp_fu_326_p1),
    .ce(1'b1),
    .dout(grp_fu_326_p2)
);

FFT_mul_mul_16s_10s_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 24 ))
mul_mul_16s_10s_24_4_1_U36(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(data_OUT4_M_imag_V_q1),
    .din1(grp_fu_332_p1),
    .ce(1'b1),
    .dout(grp_fu_332_p2)
);

FFT_mac_mulsub_16s_9s_24s_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_mulsub_16s_9s_24s_24_4_1_U37(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_338_p0),
    .din1(grp_fu_338_p1),
    .din2(grp_fu_326_p2),
    .ce(1'b1),
    .dout(grp_fu_338_p3)
);

FFT_mac_muladd_16s_9s_24s_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_9s_24s_24_4_1_U38(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_346_p0),
    .din1(grp_fu_346_p1),
    .din2(grp_fu_332_p2),
    .ce(1'b1),
    .dout(grp_fu_346_p3)
);

FFT_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_3_fu_50 <= 5'd0;
        end else if (((icmp_ln26_fu_193_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_3_fu_50 <= i_4_fu_199_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            index_fu_46 <= 32'd0;
        end else if (((icmp_ln26_fu_193_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            index_fu_46 <= butterfly_span_1_fu_242_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_193_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Ulimit_reg_372 <= Ulimit_fu_208_p1;
        zext_ln30_1_reg_387[4 : 0] <= zext_ln30_1_fu_224_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        Ulimit_reg_372_pp0_iter2_reg <= Ulimit_reg_372;
        Ulimit_reg_372_pp0_iter3_reg <= Ulimit_reg_372_pp0_iter2_reg;
        Ulimit_reg_372_pp0_iter4_reg <= Ulimit_reg_372_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        r_V_1_reg_403 <= W_M_imag_V_q0;
        sext_ln1171_2_reg_420 <= sext_ln1171_2_fu_268_p1;
        sext_ln1171_reg_408 <= sext_ln1171_fu_260_p1;
        zext_ln30_1_reg_387_pp0_iter2_reg[4 : 0] <= zext_ln30_1_reg_387[4 : 0];
        zext_ln30_1_reg_387_pp0_iter3_reg[4 : 0] <= zext_ln30_1_reg_387_pp0_iter2_reg[4 : 0];
        zext_ln30_1_reg_387_pp0_iter4_reg[4 : 0] <= zext_ln30_1_reg_387_pp0_iter3_reg[4 : 0];
        zext_ln30_1_reg_387_pp0_iter5_reg[4 : 0] <= zext_ln30_1_reg_387_pp0_iter4_reg[4 : 0];
        zext_ln31_reg_442[4 : 0] <= zext_ln31_fu_275_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W_M_imag_V_ce0 = 1'b1;
    end else begin
        W_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W_M_real_V_ce0 = 1'b1;
    end else begin
        W_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln26_fu_193_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        data_OUT4_M_imag_V_ce0 = 1'b1;
    end else begin
        data_OUT4_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_OUT4_M_imag_V_ce1 = 1'b1;
    end else begin
        data_OUT4_M_imag_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        data_OUT4_M_real_V_ce0 = 1'b1;
    end else begin
        data_OUT4_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_OUT4_M_real_V_ce1 = 1'b1;
    end else begin
        data_OUT4_M_real_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        xout_M_imag_V_ce0 = 1'b1;
    end else begin
        xout_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        xout_M_imag_V_ce1 = 1'b1;
    end else begin
        xout_M_imag_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        xout_M_imag_V_we0 = 1'b1;
    end else begin
        xout_M_imag_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        xout_M_imag_V_we1 = 1'b1;
    end else begin
        xout_M_imag_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        xout_M_real_V_ce0 = 1'b1;
    end else begin
        xout_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        xout_M_real_V_ce1 = 1'b1;
    end else begin
        xout_M_real_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        xout_M_real_V_we0 = 1'b1;
    end else begin
        xout_M_real_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        xout_M_real_V_we1 = 1'b1;
    end else begin
        xout_M_real_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Llimit_fu_212_p2 = (5'd16 ^ Ulimit_fu_208_p1);

assign Ulimit_fu_208_p1 = index_fu_46[4:0];

assign W_M_imag_V_address0 = zext_ln30_fu_218_p1;

assign W_M_real_V_address0 = zext_ln30_fu_218_p1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign butterfly_span_1_fu_242_p3 = ((icmp_ln33_fu_230_p2[0:0] == 1'b1) ? butterfly_span_fu_236_p2 : 32'd0);

assign butterfly_span_fu_236_p2 = (index_fu_46 + 32'd1);

assign data_OUT4_M_imag_V_address0 = zext_ln31_fu_275_p1;

assign data_OUT4_M_imag_V_address1 = zext_ln30_1_fu_224_p1;

assign data_OUT4_M_real_V_address0 = zext_ln31_fu_275_p1;

assign data_OUT4_M_real_V_address1 = zext_ln30_1_fu_224_p1;

assign grp_fu_326_p1 = sext_ln1171_1_fu_264_p1;

assign grp_fu_332_p1 = sext_ln1171_1_fu_264_p1;

assign grp_fu_338_p0 = sext_ln1171_2_reg_420;

assign grp_fu_338_p1 = sext_ln1171_3_fu_272_p1;

assign grp_fu_346_p0 = sext_ln1171_reg_408;

assign grp_fu_346_p1 = sext_ln1171_3_fu_272_p1;

assign i_4_fu_199_p2 = (i_3_fu_50 + 5'd1);

assign icmp_ln26_fu_193_p2 = ((i_3_fu_50 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_230_p2 = (($signed(index_fu_46) < $signed(32'd15)) ? 1'b1 : 1'b0);

assign p_r_V_fu_280_p4 = {{grp_fu_338_p3[23:8]}};

assign sext_ln1171_1_fu_264_p1 = $signed(W_M_real_V_q0);

assign sext_ln1171_2_fu_268_p1 = $signed(data_OUT4_M_imag_V_q1);

assign sext_ln1171_3_fu_272_p1 = $signed(r_V_1_reg_403);

assign sext_ln1171_fu_260_p1 = $signed(data_OUT4_M_real_V_q1);

assign trunc_ln1_fu_289_p4 = {{grp_fu_346_p3[23:8]}};

assign xout_M_imag_V_address0 = zext_ln31_reg_442;

assign xout_M_imag_V_address1 = zext_ln30_1_reg_387_pp0_iter5_reg;

assign xout_M_imag_V_d0 = (data_OUT4_M_imag_V_q0 + trunc_ln1_fu_289_p4);

assign xout_M_imag_V_d1 = (data_OUT4_M_imag_V_q0 - trunc_ln1_fu_289_p4);

assign xout_M_real_V_address0 = zext_ln31_reg_442;

assign xout_M_real_V_address1 = zext_ln30_1_reg_387_pp0_iter5_reg;

assign xout_M_real_V_d0 = (data_OUT4_M_real_V_q0 + p_r_V_fu_280_p4);

assign xout_M_real_V_d1 = (data_OUT4_M_real_V_q0 - p_r_V_fu_280_p4);

assign zext_ln30_1_fu_224_p1 = Llimit_fu_212_p2;

assign zext_ln30_fu_218_p1 = index_fu_46;

assign zext_ln31_fu_275_p1 = Ulimit_reg_372_pp0_iter4_reg;

always @ (posedge ap_clk) begin
    zext_ln30_1_reg_387[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln30_1_reg_387_pp0_iter2_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln30_1_reg_387_pp0_iter3_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln30_1_reg_387_pp0_iter4_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln30_1_reg_387_pp0_iter5_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln31_reg_442[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //FFT_FFT_Pipeline_FFT_label1
