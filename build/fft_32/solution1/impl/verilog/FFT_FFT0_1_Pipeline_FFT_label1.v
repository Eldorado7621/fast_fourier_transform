// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module FFT_FFT0_1_Pipeline_FFT_label1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        index_shift_offset_cast,
        pass_shift_offset_cast,
        FFT_stage_offset_cast,
        data_IN_M_real_0_0_0_address0,
        data_IN_M_real_0_0_0_ce0,
        data_IN_M_real_0_0_0_q0,
        data_IN_M_real_0_0_0_address1,
        data_IN_M_real_0_0_0_ce1,
        data_IN_M_real_0_0_0_q1,
        data_IN_M_imag_0_0_0_address0,
        data_IN_M_imag_0_0_0_ce0,
        data_IN_M_imag_0_0_0_q0,
        data_IN_M_imag_0_0_0_address1,
        data_IN_M_imag_0_0_0_ce1,
        data_IN_M_imag_0_0_0_q1,
        data_OUT_M_real_0_0_0_address0,
        data_OUT_M_real_0_0_0_ce0,
        data_OUT_M_real_0_0_0_we0,
        data_OUT_M_real_0_0_0_d0,
        data_OUT_M_imag_0_0_0_address0,
        data_OUT_M_imag_0_0_0_ce0,
        data_OUT_M_imag_0_0_0_we0,
        data_OUT_M_imag_0_0_0_d0,
        sub_cast,
        zext_ln26
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [2:0] index_shift_offset_cast;
input  [2:0] pass_shift_offset_cast;
input  [3:0] FFT_stage_offset_cast;
output  [4:0] data_IN_M_real_0_0_0_address0;
output   data_IN_M_real_0_0_0_ce0;
input  [15:0] data_IN_M_real_0_0_0_q0;
output  [4:0] data_IN_M_real_0_0_0_address1;
output   data_IN_M_real_0_0_0_ce1;
input  [15:0] data_IN_M_real_0_0_0_q1;
output  [4:0] data_IN_M_imag_0_0_0_address0;
output   data_IN_M_imag_0_0_0_ce0;
input  [15:0] data_IN_M_imag_0_0_0_q0;
output  [4:0] data_IN_M_imag_0_0_0_address1;
output   data_IN_M_imag_0_0_0_ce1;
input  [15:0] data_IN_M_imag_0_0_0_q1;
output  [4:0] data_OUT_M_real_0_0_0_address0;
output   data_OUT_M_real_0_0_0_ce0;
output   data_OUT_M_real_0_0_0_we0;
output  [15:0] data_OUT_M_real_0_0_0_d0;
output  [4:0] data_OUT_M_imag_0_0_0_address0;
output   data_OUT_M_imag_0_0_0_ce0;
output   data_OUT_M_imag_0_0_0_we0;
output  [15:0] data_OUT_M_imag_0_0_0_d0;
input  [3:0] sub_cast;
input  [3:0] zext_ln26;

reg ap_idle;
reg data_IN_M_real_0_0_0_ce0;
reg data_IN_M_real_0_0_0_ce1;
reg data_IN_M_imag_0_0_0_ce0;
reg data_IN_M_imag_0_0_0_ce1;
reg[4:0] data_OUT_M_real_0_0_0_address0;
reg data_OUT_M_real_0_0_0_ce0;
reg data_OUT_M_real_0_0_0_we0;
reg[15:0] data_OUT_M_real_0_0_0_d0;
reg[4:0] data_OUT_M_imag_0_0_0_address0;
reg data_OUT_M_imag_0_0_0_ce0;
reg data_OUT_M_imag_0_0_0_we0;
reg[15:0] data_OUT_M_imag_0_0_0_d0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_state8_pp0_stage1_iter3;
wire    ap_block_pp0_stage1_subdone;
wire   [0:0] icmp_ln26_fu_256_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [3:0] W_M_real_V_address0;
reg    W_M_real_V_ce0;
wire   [9:0] W_M_real_V_q0;
wire   [3:0] W_M_imag_V_address0;
reg    W_M_imag_V_ce0;
wire   [8:0] W_M_imag_V_q0;
wire   [31:0] zext_ln26_cast_fu_218_p1;
reg   [31:0] zext_ln26_cast_reg_486;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] sub_cast_cast_fu_222_p1;
reg   [31:0] sub_cast_cast_reg_491;
wire   [4:0] FFT_stage_offset_cast_cast_fu_226_p1;
reg   [4:0] FFT_stage_offset_cast_cast_reg_496;
wire   [4:0] pass_shift_offset_cast_cast_fu_230_p1;
reg   [4:0] pass_shift_offset_cast_cast_reg_501;
wire   [4:0] index_shift_offset_cast_cast_fu_234_p1;
reg   [4:0] index_shift_offset_cast_cast_reg_506;
reg   [0:0] icmp_ln26_reg_511;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln26_reg_511_pp0_iter1_reg;
reg   [0:0] icmp_ln26_reg_511_pp0_iter2_reg;
wire   [4:0] empty_20_fu_271_p1;
reg   [4:0] empty_20_reg_515;
wire   [63:0] zext_ln30_fu_280_p1;
reg   [63:0] zext_ln30_reg_520;
wire   [0:0] icmp_ln33_fu_285_p2;
reg   [0:0] icmp_ln33_reg_530;
wire   [4:0] Ulimit_fu_326_p2;
reg   [4:0] Ulimit_reg_535;
reg   [4:0] Ulimit_reg_535_pp0_iter2_reg;
wire   [63:0] zext_ln30_1_fu_336_p1;
reg   [63:0] zext_ln30_1_reg_540;
reg   [63:0] zext_ln30_1_reg_540_pp0_iter2_reg;
reg   [63:0] zext_ln30_1_reg_540_pp0_iter3_reg;
reg   [9:0] r_V_reg_546;
wire  signed [23:0] sext_ln1171_fu_373_p1;
reg  signed [23:0] sext_ln1171_reg_566;
wire  signed [23:0] sext_ln1171_1_fu_377_p1;
wire  signed [23:0] sext_ln1171_2_fu_380_p1;
reg  signed [23:0] sext_ln1171_2_reg_578;
wire  signed [23:0] sext_ln1171_3_fu_384_p1;
wire  signed [23:0] grp_fu_437_p2;
wire  signed [23:0] grp_fu_443_p2;
wire   [63:0] zext_ln31_fu_388_p1;
reg   [63:0] zext_ln31_reg_600;
wire   [15:0] p_r_M_real_V_4_fu_425_p2;
reg   [15:0] p_r_M_real_V_4_reg_616;
wire   [15:0] p_r_M_imag_V_4_fu_431_p2;
reg   [15:0] p_r_M_imag_V_4_reg_621;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage0;
reg   [31:0] butterfly_span_fu_58;
wire   [31:0] butterfly_span_4_fu_296_p3;
wire    ap_loop_init;
reg   [31:0] butterfly_pass_fu_62;
wire   [31:0] butterfly_pass_3_fu_361_p3;
reg   [4:0] i_fu_66;
wire   [4:0] i_6_fu_262_p2;
wire   [15:0] p_r_M_real_V_3_fu_411_p2;
wire   [15:0] p_r_M_imag_V_3_fu_418_p2;
wire   [4:0] index_fu_275_p2;
wire   [31:0] butterfly_span_3_fu_290_p2;
wire   [4:0] empty_19_fu_317_p1;
wire   [4:0] shl_ln28_fu_321_p2;
wire   [4:0] Llimit_fu_331_p2;
wire   [0:0] icmp_ln35_fu_342_p2;
wire   [31:0] butterfly_pass_1_fu_347_p2;
wire   [31:0] butterfly_pass_2_fu_353_p3;
wire  signed [23:0] grp_fu_449_p3;
wire  signed [23:0] grp_fu_457_p3;
wire   [15:0] p_r_V_fu_393_p4;
wire   [15:0] trunc_ln_fu_402_p4;
wire  signed [9:0] grp_fu_437_p1;
wire  signed [9:0] grp_fu_443_p1;
wire  signed [15:0] grp_fu_449_p0;
wire  signed [8:0] grp_fu_449_p1;
wire  signed [15:0] grp_fu_457_p0;
wire  signed [8:0] grp_fu_457_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter3_stage0;
reg    ap_idle_pp0_0to2;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to4;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

FFT_FFT0_1_Pipeline_FFT_label1_W_M_real_V_ROM_AUTO_1R #(
    .DataWidth( 10 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
W_M_real_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(W_M_real_V_address0),
    .ce0(W_M_real_V_ce0),
    .q0(W_M_real_V_q0)
);

FFT_FFT0_1_Pipeline_FFT_label1_W_M_imag_V_ROM_AUTO_1R #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
W_M_imag_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(W_M_imag_V_address0),
    .ce0(W_M_imag_V_ce0),
    .q0(W_M_imag_V_q0)
);

FFT_mul_mul_16s_10s_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 24 ))
mul_mul_16s_10s_24_4_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(data_IN_M_real_0_0_0_q1),
    .din1(grp_fu_437_p1),
    .ce(1'b1),
    .dout(grp_fu_437_p2)
);

FFT_mul_mul_16s_10s_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 24 ))
mul_mul_16s_10s_24_4_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(data_IN_M_imag_0_0_0_q1),
    .din1(grp_fu_443_p1),
    .ce(1'b1),
    .dout(grp_fu_443_p2)
);

FFT_mac_mulsub_16s_9s_24s_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_mulsub_16s_9s_24s_24_4_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_449_p0),
    .din1(grp_fu_449_p1),
    .din2(grp_fu_437_p2),
    .ce(1'b1),
    .dout(grp_fu_449_p3)
);

FFT_mac_muladd_16s_9s_24s_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_9s_24s_24_4_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_457_p0),
    .din1(grp_fu_457_p1),
    .din2(grp_fu_443_p2),
    .ce(1'b1),
    .dout(grp_fu_457_p3)
);

FFT_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to2 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter3_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to2 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter3_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to2 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter3_stage0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            butterfly_pass_fu_62 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln26_reg_511 == 1'd0))) begin
            butterfly_pass_fu_62 <= butterfly_pass_3_fu_361_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        butterfly_span_fu_58 <= 32'd0;
    end else if (((icmp_ln26_fu_256_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        butterfly_span_fu_58 <= butterfly_span_4_fu_296_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_fu_66 <= 5'd0;
    end else if (((icmp_ln26_fu_256_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i_fu_66 <= i_6_fu_262_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FFT_stage_offset_cast_cast_reg_496[3 : 0] <= FFT_stage_offset_cast_cast_fu_226_p1[3 : 0];
        Ulimit_reg_535_pp0_iter2_reg <= Ulimit_reg_535;
        index_shift_offset_cast_cast_reg_506[2 : 0] <= index_shift_offset_cast_cast_fu_234_p1[2 : 0];
        pass_shift_offset_cast_cast_reg_501[2 : 0] <= pass_shift_offset_cast_cast_fu_230_p1[2 : 0];
        sub_cast_cast_reg_491[3 : 0] <= sub_cast_cast_fu_222_p1[3 : 0];
        zext_ln26_cast_reg_486[3 : 0] <= zext_ln26_cast_fu_218_p1[3 : 0];
        zext_ln30_1_reg_540_pp0_iter2_reg[4 : 0] <= zext_ln30_1_reg_540[4 : 0];
        zext_ln30_1_reg_540_pp0_iter3_reg[4 : 0] <= zext_ln30_1_reg_540_pp0_iter2_reg[4 : 0];
        zext_ln31_reg_600[4 : 0] <= zext_ln31_fu_388_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln26_reg_511 == 1'd0))) begin
        Ulimit_reg_535 <= Ulimit_fu_326_p2;
        r_V_reg_546 <= W_M_real_V_q0;
        zext_ln30_1_reg_540[4 : 0] <= zext_ln30_1_fu_336_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_256_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        empty_20_reg_515 <= empty_20_fu_271_p1;
        icmp_ln33_reg_530 <= icmp_ln33_fu_285_p2;
        zext_ln30_reg_520[4 : 0] <= zext_ln30_fu_280_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln26_reg_511 <= icmp_ln26_fu_256_p2;
        icmp_ln26_reg_511_pp0_iter1_reg <= icmp_ln26_reg_511;
        icmp_ln26_reg_511_pp0_iter2_reg <= icmp_ln26_reg_511_pp0_iter1_reg;
        p_r_M_imag_V_4_reg_621 <= p_r_M_imag_V_4_fu_431_p2;
        p_r_M_real_V_4_reg_616 <= p_r_M_real_V_4_fu_425_p2;
        sext_ln1171_2_reg_578 <= sext_ln1171_2_fu_380_p1;
        sext_ln1171_reg_566 <= sext_ln1171_fu_373_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        W_M_imag_V_ce0 = 1'b1;
    end else begin
        W_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        W_M_real_V_ce0 = 1'b1;
    end else begin
        W_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln26_fu_256_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln26_reg_511_pp0_iter2_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to4 = 1'b1;
    end else begin
        ap_idle_pp0_1to4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_IN_M_imag_0_0_0_ce0 = 1'b1;
    end else begin
        data_IN_M_imag_0_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_IN_M_imag_0_0_0_ce1 = 1'b1;
    end else begin
        data_IN_M_imag_0_0_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_IN_M_real_0_0_0_ce0 = 1'b1;
    end else begin
        data_IN_M_real_0_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_IN_M_real_0_0_0_ce1 = 1'b1;
    end else begin
        data_IN_M_real_0_0_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_OUT_M_imag_0_0_0_address0 = zext_ln31_reg_600;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_OUT_M_imag_0_0_0_address0 = zext_ln30_1_reg_540_pp0_iter3_reg;
    end else begin
        data_OUT_M_imag_0_0_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        data_OUT_M_imag_0_0_0_ce0 = 1'b1;
    end else begin
        data_OUT_M_imag_0_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_OUT_M_imag_0_0_0_d0 = p_r_M_imag_V_4_reg_621;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_OUT_M_imag_0_0_0_d0 = p_r_M_imag_V_3_fu_418_p2;
    end else begin
        data_OUT_M_imag_0_0_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        data_OUT_M_imag_0_0_0_we0 = 1'b1;
    end else begin
        data_OUT_M_imag_0_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_OUT_M_real_0_0_0_address0 = zext_ln31_reg_600;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_OUT_M_real_0_0_0_address0 = zext_ln30_1_reg_540_pp0_iter3_reg;
    end else begin
        data_OUT_M_real_0_0_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        data_OUT_M_real_0_0_0_ce0 = 1'b1;
    end else begin
        data_OUT_M_real_0_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_OUT_M_real_0_0_0_d0 = p_r_M_real_V_4_reg_616;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_OUT_M_real_0_0_0_d0 = p_r_M_real_V_3_fu_411_p2;
    end else begin
        data_OUT_M_real_0_0_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        data_OUT_M_real_0_0_0_we0 = 1'b1;
    end else begin
        data_OUT_M_real_0_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to2 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter3_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to4 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign FFT_stage_offset_cast_cast_fu_226_p1 = FFT_stage_offset_cast;

assign Llimit_fu_331_p2 = (Ulimit_fu_326_p2 + FFT_stage_offset_cast_cast_reg_496);

assign Ulimit_fu_326_p2 = (empty_20_reg_515 + shl_ln28_fu_321_p2);

assign W_M_imag_V_address0 = zext_ln30_reg_520;

assign W_M_real_V_address0 = zext_ln30_fu_280_p1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign butterfly_pass_1_fu_347_p2 = (butterfly_pass_fu_62 + 32'd1);

assign butterfly_pass_2_fu_353_p3 = ((icmp_ln35_fu_342_p2[0:0] == 1'b1) ? butterfly_pass_1_fu_347_p2 : 32'd0);

assign butterfly_pass_3_fu_361_p3 = ((icmp_ln33_reg_530[0:0] == 1'b1) ? butterfly_pass_fu_62 : butterfly_pass_2_fu_353_p3);

assign butterfly_span_3_fu_290_p2 = (butterfly_span_fu_58 + 32'd1);

assign butterfly_span_4_fu_296_p3 = ((icmp_ln33_fu_285_p2[0:0] == 1'b1) ? butterfly_span_3_fu_290_p2 : 32'd0);

assign data_IN_M_imag_0_0_0_address0 = zext_ln31_fu_388_p1;

assign data_IN_M_imag_0_0_0_address1 = zext_ln30_1_fu_336_p1;

assign data_IN_M_real_0_0_0_address0 = zext_ln31_fu_388_p1;

assign data_IN_M_real_0_0_0_address1 = zext_ln30_1_fu_336_p1;

assign empty_19_fu_317_p1 = butterfly_pass_fu_62[4:0];

assign empty_20_fu_271_p1 = butterfly_span_fu_58[4:0];

assign grp_fu_437_p1 = sext_ln1171_1_fu_377_p1;

assign grp_fu_443_p1 = sext_ln1171_1_fu_377_p1;

assign grp_fu_449_p0 = sext_ln1171_2_reg_578;

assign grp_fu_449_p1 = sext_ln1171_3_fu_384_p1;

assign grp_fu_457_p0 = sext_ln1171_reg_566;

assign grp_fu_457_p1 = sext_ln1171_3_fu_384_p1;

assign i_6_fu_262_p2 = (i_fu_66 + 5'd1);

assign icmp_ln26_fu_256_p2 = ((i_fu_66 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_285_p2 = (($signed(butterfly_span_fu_58) < $signed(sub_cast_cast_reg_491)) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_342_p2 = (($signed(butterfly_pass_fu_62) < $signed(zext_ln26_cast_reg_486)) ? 1'b1 : 1'b0);

assign index_fu_275_p2 = empty_20_fu_271_p1 << index_shift_offset_cast_cast_reg_506;

assign index_shift_offset_cast_cast_fu_234_p1 = index_shift_offset_cast;

assign p_r_M_imag_V_3_fu_418_p2 = (data_IN_M_imag_0_0_0_q0 - trunc_ln_fu_402_p4);

assign p_r_M_imag_V_4_fu_431_p2 = (data_IN_M_imag_0_0_0_q0 + trunc_ln_fu_402_p4);

assign p_r_M_real_V_3_fu_411_p2 = (data_IN_M_real_0_0_0_q0 - p_r_V_fu_393_p4);

assign p_r_M_real_V_4_fu_425_p2 = (data_IN_M_real_0_0_0_q0 + p_r_V_fu_393_p4);

assign p_r_V_fu_393_p4 = {{grp_fu_449_p3[23:8]}};

assign pass_shift_offset_cast_cast_fu_230_p1 = pass_shift_offset_cast;

assign sext_ln1171_1_fu_377_p1 = $signed(r_V_reg_546);

assign sext_ln1171_2_fu_380_p1 = $signed(data_IN_M_imag_0_0_0_q1);

assign sext_ln1171_3_fu_384_p1 = $signed(W_M_imag_V_q0);

assign sext_ln1171_fu_373_p1 = $signed(data_IN_M_real_0_0_0_q1);

assign shl_ln28_fu_321_p2 = empty_19_fu_317_p1 << pass_shift_offset_cast_cast_reg_501;

assign sub_cast_cast_fu_222_p1 = sub_cast;

assign trunc_ln_fu_402_p4 = {{grp_fu_457_p3[23:8]}};

assign zext_ln26_cast_fu_218_p1 = zext_ln26;

assign zext_ln30_1_fu_336_p1 = Llimit_fu_331_p2;

assign zext_ln30_fu_280_p1 = index_fu_275_p2;

assign zext_ln31_fu_388_p1 = Ulimit_reg_535_pp0_iter2_reg;

always @ (posedge ap_clk) begin
    zext_ln26_cast_reg_486[31:4] <= 28'b0000000000000000000000000000;
    sub_cast_cast_reg_491[31:4] <= 28'b0000000000000000000000000000;
    FFT_stage_offset_cast_cast_reg_496[4] <= 1'b0;
    pass_shift_offset_cast_cast_reg_501[4:3] <= 2'b00;
    index_shift_offset_cast_cast_reg_506[4:3] <= 2'b00;
    zext_ln30_reg_520[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln30_1_reg_540[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln30_1_reg_540_pp0_iter2_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln30_1_reg_540_pp0_iter3_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln31_reg_600[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //FFT_FFT0_1_Pipeline_FFT_label1
